when making a new rust project you have to run "rustc <rust_file>" and then './<exec_file>' that is then generated

after finishing your project run 'cargo build' to create an executable file for debug purpouses in ./target/debug/<cargoDirName>

you can also skip the step of running it after building with the 'cargo run' command

a list of dependancies and their versions are maintained in the cargo.lock file 

'cargo check' runs a check over the code to make sure its able to compile but doesn't create an executable file

[COMMENTS]
// == single line comment
/*<multiple lines to comment> */ == multi line comment

[VARIABLES]
there are two types of variables immutable and mutable by default all variables are considered immutable unless defined 
	- mutable ==== it can change
	- immutable == the value is constant

rust implements immutable variables by default as a security feature of the language

variables are defined by the keyword 'let'
    variables can be defined as mutable in the form of "let mut <varName> = <value>"
variables can be called in a string by using {} as placeholders (println!({x}) will print the value of x)

Constants are like variables but are meant to never be mutable ever and can be called like
        const ALL_UPPERCASE_VAR_NAME = <value>
it is convention in rust to make all constant names in all caps with underscores between words.

[SHADOWING]
shadowing is when you redeclare a variable. such as
        let x = 4;
        let x = x+1;
        {
            let x = x*2;
        }
Because let was used to define x twice the second value is used even though the variable wasn't mutable.

in the bottom half of the above example a innerscope was created which will only be available inside that scope

one of the differences between mut and shadowing is that shadowing allows you to change the variable value type while keeping the same name.

[DATA TYPES]
Rust is a statically typed language meaning that it needs to know the value type at compile time.

their are four scalar types (representing a single value) in rust:
        -integers
            length   :: signed :: unsigned
             8bit    ::   i8   ::    u8
            16bit    ::  i16   ::   u16
            32bit    ::  i32   ::   u32
            64bit    ::  i64   ::   u64
           128bit    :: i128   ::  u128
            arch     :: isize  ::  usize

           arch size is dependent upon your system archetecture.

        -floats
			there are only 2 versions of floats all floats are signed
			f32 & f64  
			f64 is the  64 bit version of 32f and is the default version cause its roughly the same speed and is more accurate

        -booleans
			True or false
			the bool type is specified by the bool keyword
			bools are one byte in size

        -character
			a single character is four bytes in size and represents a unicode scalar value
			chars can contain more than just ASCII values
			char literals are specified with single quotes 'A'

[Compound Types]
	-Tuple
		a way of grouping together a number of values with a variety of types into one compound type.
		-they have a fixed length and cannot be changed once declared
		-tuples are can only be printed if there are 12 or less elements in the tuple
		

		let tup1: (i32, f64, u8) = (500,6.4,1);
		let tup2 = (true, 23, 'x');

		tuples can be destructed (allowing one element of the tuple to be called) in multiple ways
			let tup2_2 = tup2.2; //will call the second element of the 2nd tuple
			let (x,y,z) = tup1; //will declare x, y, and z as the elements of the first tuple respectivly

	-Array
		a collection of multiple variables
		-differs from a tuple in the fact that every element must be of the same type
		-arrays are fixed in length and cannot grow or shrink the amount of elements

		arrays are declared in brackets
			let array1 = [1,2,3,4,5];		

		variable type and array size can be defined in an array
			let array1: [i32; 5] = [1,2,3,4,5]; 

		Arrays can be initaialized to contain the same value for a specified amount of elements
			let array2 = [4;5];
			array2 == [4,4,4,4,4]
	
		individual elements in an array can be mutable and shadowed

		array elements can be accessed like the following 
			let first = array1[0]; //this will access array 1 setting the value to the zero index of the array
			
			rust won't allow you to use -1 to access the last element of the array though since the size is fixed it shouldn't be too big of an issue

[RECIEVING_USER_INPUT]
using the i/o functionality from the standard library (std::io) stdin() function
	ex. include std::io
	    io::stdin()
	        .read_line(&mut guess)

the .read_line() is called on the stdin() handle to get the input from the user
	the "&mut guess" argument to set the variable to the user input

the & in "&mut guess" indicates that it is a reference. which lets multiple parts of the code to access one piece of data without needing to copy that data into memory multiple time

the .read_line() also passes a second Result value.
	Result is an enumeration, which is a type that can be in one of multiple possible states called varients

[INPUT_VALIDATION]
    let guess: u32 = match guess.trim().parse() {
        Ok(num) => num,
        Err(_) => continue,
        };

in the example of the above we are validating that the variable guess is a number
        after the trim method we parse the variable witch will return an enum of OK and Err
        if parse() is able to turn the gusse into a num it will return an Ok value if not will return an Err


[ERROR_CASING]
when we want to troubleshoot we can use a .expect() method which will take the Result value for stdin the two possible varient values are ok and err if ok is passsed the program will keep on going but if an err value is passed it will break and display whatever was passed as an argument inside of the .expect() method.

not using a .expect() will allow for the program to compile but it will throw a warning.


[MATCH_EXPRESSIONS]
A match expression is made up of arms. An arm consists of a pattern to match against, and the code that should be run if the value given to match fits that arm's pattern


[FUNCTIONS]
	in rust functions are declared with the 'fn' keyword followed by the function name with arguments then encapsulated in curly braces
		fn this_is_a_function() {
			println!("this is the result of the function");
		}
	to call a function in main
		fn main(){
			this_is_a_function();
		}

	rust will allow functions to be called from any scope as long as it exists
	
	when creating a function that takes an argument the variable type must be declared as well
		fn test(x: u32) {<code here>}

	this is done so that the compilier almost never needs you to use them elsewhere in the code to figure out what type you mean

	
[Statements]
	Satements are instructions that perform some action and do not return a value
	-function definitions are considered statements
	

[Expression]
	Expressions evaluate to a resultant value
	
	expressions can be part of statements 
	
	the act of calling a function is also considered an expression

	
[Function_Return_Values]
	-functions can return values to the code that calls them

	-return values don't have to be named but they must have their type declared after an arrow

	fn test() -> i32 {"test"}


