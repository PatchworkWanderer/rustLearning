[Ownership]
a set of rules that govern how a rust program manages memory.

this is used to manage how rust uses a computers memory while it is executing a program

there are three rules of ownership in rust:
	-Each value has an owner
	-There can only be one owner at a time
	-if the owner goes out of scope, the value will be dropped.

[Scope]
	the range within a program for which an item is valid

	when a variable comes into scope it is valid and remains so until it goes out of scope


[Stack]
	the stack stores values in the order that it recieves them in a "last in, first out" way
	
	adding data to the stack is call pushing to the stack

	deleting data from the stack is called popping of the stack

	must have a fixed known size
	
	Is much faster than allocating on the heap

[Heap]
	the heap is a less organized way to store values in memory

	when allocating on the heap you request for an empty spot in the heap that is big enough, marks it as being used, then returns a pointer to that space

[Memory_and_Allocation]
	using the string type as an example, in order to support a mutable, growable piece of text, we need to allocate an amount of memory on the heap, unknown at compile time, to hold the contents.
		-the memory must be requested from the memory allocator at runtime
		-we need a way of returning this memory to the allocator when we're done with our string

	the first part is done by using the String::from() in the first part of the lab 
		-the String::from() requests the memory that it needs

	the second part is different from most languages cause rust doesn't have a garbage collector that keeps track of and cleans up memory that isn't being used anymore
		-the resposiblilty falls to the programmer to be the garbage collecter
		- match one allocate to exactly one free

	Rust will auto matically return memory once the variable that owns it goes out of scope with the drop function

	when a variable's value stored in the heap is assigned to another variable rust will release the original 
	variable to avoid causing a double free error. unlike shallow copies and deep copies in other languages
	because rust invalidates the first variable it is considered a move.

[DEEP_COPY]
	a deep copy is a way to copy the heap data of a string instead of the stack data

	- a deep copy is commonly done with the clone method

	-this is a very resource expensive way to copy data 
	
[Stack_copy]
	if data is stored on the stack it can be copied directly from the stack

	rust will not let you annotate a type with copy if the type, or any of its parts has implemented the drop trait (has had its value moved)

	data types that can implement copy are:
		-all integer types
		-booleans
		-all floats
		-chars
		-tuples if the only contain types that can also implement copy [ (i32, i64) ]

[Returning_value]
	Returning a value from a function is also a way to transfer ownership 
		- can transer value into the function and return it somwhere else
		- can generate a value and transfer ownership to a variable

[References and Borrowing]
	A reference is like a pointer in that it's an adress we can follow to access the data stored at that address; that data is owned by some other variable
		unlike a pointer, a reference is guaranteed to point to a valid value of a particular type for the lif of that reference

	using an & will tell rust that we want to use the reference of the variable and is usefull for using a variable without taking ownership of it.

	the act of creating a reference is called borrowing

	by default references are immutable


[Mutable reference]
	like a regular reference with a few more steps and is able to change the value of the reference owner
	
	mutable references do have a restriction in that if you have a mutable reference to a value, you can have no otherr references to that value
		-two vars that reference the same value
			let mut x1 = &z;
			let mut x2 = &z;

	this restriction is to prevent data races that could be difficult to diagnose later in life
		a data race happens when three behaviors occure
			- two or more pointers access the same data at the same time
			- at least one of the pointers is being used to write to the data
			- there's no mechanism being used to synchronize access to the data.

	when declaring the owning variable it needs to be mutable and when passed to a function it needs to be like (&mut <var>)
	when declaring the function thats going to be using the mutable reference when declaring the var type it needs to be (<var>: &mut <var_type>)

	you can have as many immutable references as you want but rust will throw an error if there is an mutable and immutable reference to the same value.

	though you can use both types as long as their scopes don't overlap

[Dangling_reference]
	Dangling pointers are pointers that references a location in memory that may have been 
	given to someone else by freeing some memory while preserving a pointer to that memory
	
	-this is impossible to do in rust as the compiler will make sure that
	 the data will not go out of scope before the reference to the data does
	

[Slices]
	slices allow you to reference a contiguous sequence of elements in a collection ratther than the whole collection
	-a slice is a sort of reference, so it doesn't have ownership of the borrowed elements

	string slices are declared in the format of 
		let <var_name> = &<str_to_be_referenced>[<start>..<end>]

	when declaring a range if you want to start at the 0 index you can skip putting a start value.
		[0..5] == [..5]

	the same thing can be done for the trailing number if you want the last index value.
		[6..11] == [6..]
