[Ownership]
a set of rules that govern how a rust program manages memory.

this is used to manage how rust uses a computers memory while it is executing a program

there are three rules of ownership in rust:
	-Each value has an owner
	-There can only be one owner at a time
	-if the owner goes out of scope, the value will be dropped.

[Scope]
	the range within a program for which an item is valid

	when a variable comes into scope it is valid and remains so until it goes out of scope


[Stack]
	the stack stores values in the order that it recieves them in a "last in, first out" way
	
	adding data to the stack is call pushing to the stack

	deleting data from the stack is called popping of the stack

	must have a fixed known size
	
	Is much faster than allocating on the heap

[Heap]
	the heap is a less organized way to store values in memory

	when allocating on the heap you request for an empty spot in the heap that is big enough, marks it as being used, then returns a pointer to that space

[Memory_and_Allocation]
	using the string type as an example, in order to support a mutable, growable piece of text, we need to allocate an amount of memory on the heap, unknown at compile time, to hold the contents.
		-the memory must be requested from the memory allocator at runtime
		-we need a way of returning this memory to the allocator when we're done with our string

	the first part is done by using the String::from() in the first part of the lab 
		-the String::from() requests the memory that it needs

	the second part is different from most languages cause rust doesn't have a garbage collector that keeps track of and cleans up memory that isn't being used anymore
		-the resposiblilty falls to the programmer to be the garbage collecter
		- match one allocate to exactly one free

	Rust will auto matically return memory once the variable that owns it goes out of scope with the drop function

	when a variable's value stored in the heap is assigned to another variable rust will release the original 
	variable to avoid causing a double free error. unlike shallow copies and deep copies in other languages
	because rust invalidates the first variable it is considered a move.

[DEEP_COPY]
	a deep copy is a way to copy the heap data of a string instead of the stack data

	- a deep copy is commonly done with the clone method

	-this is a very resource expensive way to copy data 
	
[Stack_copy]
	if data is stored on the stack it can be copied directly from the stack

	data types that can implement copy are:
		-all integer types
		-booleans
		-all floats
		-chars
		-tuples if the only contain types that can also implement copy [ (i32, i64) ]

[Returning_value]
	Returning a value from a function is also a way to transfer ownership 
		- can transer value into the function and return it somwhere else
		- can generate a value and transfer ownership to a variable
