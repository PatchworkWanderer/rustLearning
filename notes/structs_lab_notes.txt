[Structs]
	a struct is a custom data type that lets you package together and name multiple related values that make up a meaningful group
		-similar to on object's data attribute in object-orientated languages
		-structs and enums are the building blocks for creating new types in your program's domain to take full advantage of Rust's compile-time type checking
	
	structs are similar to tuples in that both hold multiple related values and can be different types
		they differ from tuples in that you name each piece of data so its clear what the values mean. making structs more flexible

	sample define of a struct				creation of a struct instance

	struct <name> {							let <name> = <struct_name> {
		<field1>: <type>,						<field1>: <value>,
		<field2>: <type>,						<field2>: <value>,
		<field3>: <type>,						<field3>: <value>,
	}										};

	to use a specific value from a struct use dot notation 
		<object_name>.<field>

[field init shorthand]
field init short hand is used when using a function to create an instance of a struct if the parameter name passed to the function 
is the same as the field of the struct used then you are able to just have the parameter in place

fn build_user(email: String, username: String) -> User {
     //showcase to demonstrate field init while using structs
	     User {
         active: true,
         username, //because we are passing username and email as parameters
         email,    //we can skip the repetition if the struct fields match with
         sign_in_count: 1, //the parameters passed
     }
 }

[Struct Update Syntax]
	rust allows you to fill out an instance of a struct with a previously declared instance
	such as a template  
	
	after filling out the unique data in an instance you can use the update syntax
			..<template_instance>

[Tuples Structs]
	these are structs that are like tuples in the fact that it is fieldless and contains valus
	
	Tuple structs are useful when you want to give the whole tuple a name and make the tuple a different type from the other tuples,
	and when naming each field as in a regular struct would be verbose or redundant (such as an coordinates for a map)

[Unit-like Structs]
	behave similar to the tuple type and are useful when you need to implement a trait on 
	some type but don't have any data that youwant to store in the type itself

[Printing Struct Data]
	by default rust won't print struct data

	by adding '#[derive(Debug)]' to the code you will be able to print structs

	when using the println statement for a struct there are two ways that it can do it 
		{:?}  -- one line    | the values of the rectangle are Rectangle { height: 69, width: 69 }
		{:#?} -- multi line  | the values of the rectangle are Rectangle {
							       height: 69,
                                   width: 69,
							   }

[Debuging Structs]
	we can use the dbg! macro to take ownership of a specific struct field 

	the macro will return the following output when ran:

[src/main.rs:127:10] 30 * scale = 60
[src/main.rs:131:2] &rect1 = Rectangle {
    height: 69,
    width: 60,
}

[Methods]
	methods are like functions in that they are declared with fn, can take parameters, has some code to be ran, and return a value

	unlike functions methods are defined within the context of a struct and that their first parameter is always self
		- self represents the instance of the struct the method is being called on

	self is an alias for the type that the impl block is for.

	method names can have the same name as the struts fields

	most of the time when methods are given the same name as a field they do nothing but return the value of that field
		- this kind of method is called a getter.
		- getters are useful when you want to make the field private but the method public enabling read-only access to the field

	each struct is allowed to have multiple impl blocks but its bad for organization.

[Associated functions]
	all functions within an impl block are called associated functions cause they are associated with the type named after the impl

	can be defined as functions that don't need an instance of the type to work with 

	typically these are used as constructors for new instances of a type

	to call an associated function we call it with the name of the type and the function name
		Struct::function_name(parameters);
	
