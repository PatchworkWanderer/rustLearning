[Structs]
	a struct is a custom data type that lets you package together and name multiple related values that make up a meaningful group
		-similar to on object's data attribute in object-orientated languages
		-structs and enums are the building blocks for creating new types in your program's domain to take full advantage of Rust's compile-time type checking
	
	structs are similar to tuples in that both hold multiple related values and can be different types
		they differ from tuples in that you name each piece of data so its clear what the values mean. making structs more flexible

	sample define of a struct				creation of a struct instance

	struct <name> {							let <name> = <struct_name> {
		<field1>: <type>,						<field1>: <value>,
		<field2>: <type>,						<field2>: <value>,
		<field3>: <type>,						<field3>: <value>,
	}										};

	to use a specific value from a struct use dot notation 
		<object_name>.<field>

[field init shorthand]
field init short hand is used when using a function to create an instance of a struct if the parameter name passed to the function 
is the same as the field of the struct used then you are able to just have the parameter in place

fn build_user(email: String, username: String) -> User {
     //showcase to demonstrate field init while using structs
	     User {
         active: true,
         username, //because we are passing username and email as parameters
         email,    //we can skip the repetition if the struct fields match with
         sign_in_count: 1, //the parameters passed
     }
 }

[Struct Update Syntax]
	rust allows you to fill out an instance of a struct with a previously declared instance
	such as a template  
	
	after filling out the unique data in an instance you can use the update syntax
			..<template_instance>

[Tuples Structs]
	these are structs that are like tuples in the fact that it is fieldless and contains valus
	
	Tuple structs are useful when you want to give the whole tuple a name and make the tuple a different type from the other tuples,
	and when naming each field as in a regular struct would be verbose or redundant (such as an coordinates for a map)












